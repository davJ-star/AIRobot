{
    "sourceFile": "david/autonomous-driving/project/2DBB/2DBB.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1723442508002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1723442508002,
            "name": "Commit-0",
            "content": "import os\nimport json\nimport cv2\nimport numpy as np\nfrom ultralytics import YOLO\nfrom sklearn.model_selection import train_test_split\nfrom albumentations import (\n    Compose, RandomBrightnessContrast, HueSaturationValue, GaussNoise,\n    HorizontalFlip, RandomCrop, Rotate, ShiftScaleRotate\n)\n\n# 데이터 로딩 및 전처리 함수\ndef load_and_preprocess_data(json_path, image_dir):\n    with open(json_path, 'r') as f:\n        data = json.load(f)\n    \n    image_path = os.path.join(image_dir, data['image_name'])\n    image = cv2.imread(image_path)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    \n    annotations = data['Annotation']\n    boxes = []\n    labels = []\n    for ann in annotations:\n        boxes.append(ann['data'])\n        labels.append(ann['class_name'])\n    \n    return image, np.array(boxes), labels\n\n# 박스 정규화 함수\ndef normalize_boxes(boxes, image_size):\n    return boxes / np.array([image_size[1], image_size[0], image_size[1], image_size[0]])\n\n# 데이터 증강 함수\ndef augment_data(image, boxes, labels):\n    augmentations = Compose([\n        RandomBrightnessContrast(p=0.5),\n        HueSaturationValue(p=0.5),\n        GaussNoise(p=0.3),\n        HorizontalFlip(p=0.5),\n        RandomCrop(height=image.shape[0], width=image.shape[1], p=0.3),\n        Rotate(limit=10, p=0.3),\n        ShiftScaleRotate(shift_limit=0.1, scale_limit=0.1, rotate_limit=10, p=0.3)\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\n    \n    augmented = augmentations(image=image, bboxes=boxes, labels=labels)\n    return augmented['image'], np.array(augmented['bboxes']), augmented['labels']\n\n# YOLO 형식으로 레이블 변환\ndef convert_to_yolo_format(boxes, labels, image_size):\n    yolo_labels = []\n    for box, label in zip(boxes, labels):\n        x_center = (box[0] + box[2]) / 2 / image_size[1]\n        y_center = (box[1] + box[3]) / 2 / image_size[0]\n        width = (box[2] - box[0]) / image_size[1]\n        height = (box[3] - box[1]) / image_size[0]\n        class_id = class_mapping[label]\n        yolo_labels.append(f\"{class_id} {x_center} {y_center} {width} {height}\")\n    return yolo_labels\n\n# 데이터셋 준비 함수\ndef prepare_dataset(json_dir, image_dir, output_dir):\n    os.makedirs(output_dir, exist_ok=True)\n    os.makedirs(os.path.join(output_dir, 'images'), exist_ok=True)\n    os.makedirs(os.path.join(output_dir, 'labels'), exist_ok=True)\n\n    data = []\n    for json_file in os.listdir(json_dir):\n        if json_file.endswith('.json'):\n            json_path = os.path.join(json_dir, json_file)\n            image, boxes, labels = load_and_preprocess_data(json_path, image_dir)\n            \n            # 데이터 증강\n            aug_image, aug_boxes, aug_labels = augment_data(image, boxes, labels)\n            \n            # YOLO 형식으로 변환\n            yolo_labels = convert_to_yolo_format(aug_boxes, aug_labels, aug_image.shape[:2])\n            \n            # 이미지 저장\n            image_filename = f\"aug_{json_file[:-5]}.jpg\"\n            cv2.imwrite(os.path.join(output_dir, 'images', image_filename), cv2.cvtColor(aug_image, cv2.COLOR_RGB2BGR))\n            \n            # 레이블 저장\n            label_filename = f\"aug_{json_file[:-5]}.txt\"\n            with open(os.path.join(output_dir, 'labels', label_filename), 'w') as f:\n                f.write('\\n'.join(yolo_labels))\n            \n            data.append(image_filename)\n    \n    return data\n\n# 클래스 매핑 정의\nclass_mapping = {\n    'car': 0, 'bus': 1, 'truck': 2, 'special vehicle': 3,\n    'motorcycle': 4, 'bicycle': 5, 'personal mobility': 6,\n    'person': 7, 'Traffic_light': 8, 'Traffic_sign': 9\n}\n\n# 메인 실행 코드\nif __name__ == \"__main__\":\n    # 데이터 준비\n    train_data = prepare_dataset('path/to/train/json', 'path/to/train/images', 'path/to/output/train')\n    val_data = prepare_dataset('path/to/val/json', 'path/to/val/images', 'path/to/output/val')\n\n    # 데이터 분할\n    train_data, val_data = train_test_split(train_data, test_size=0.2, random_state=42)\n\n    # YAML 설정 파일 생성\n    yaml_content = f\"\"\"\n    train: path/to/output/train/images\n    val: path/to/output/val/images\n\n    nc: {len(class_mapping)}\n    names: {list(class_mapping.keys())}\n    \"\"\"\n\n    with open('dataset.yaml', 'w') as f:\n        f.write(yaml_content)\n\n    # 모델 로드 및 학습\n    model = YOLO('yolov5s.pt')  # 사전 학습된 YOLOv5s 모델 로드\n\n    # 모델 학습\n    results = model.train(\n        data='dataset.yaml',\n        epochs=100,\n        imgsz=640,\n        batch=16,\n        name='yolov5_autonomous_driving'\n    )\n\n    # 모델 평가\n    results = model.val()\n\n    # 테스트 데이터에 대한 예측\n    test_results = model('path/to/test/images')\n\n    # 결과 저장\n    test_results.save('path/to/save/results')"
        }
    ]
}